#include <iostream>

#ifndef LOC_H
#define LOC_H

typedef struct node
{
    double info[7];
    node* next = nullptr;
}node;

struct Points {
    int nums;
    int cols;

    double** data;

    Points(int r, int c) : nums(r), cols(c) {
        data = new double*[nums];
        for (int i = 0; i < nums; ++i) {
            data[i] = new double[cols];
        }
    }

    ~Points() {
        for (int i = 0; i < nums; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }
};


// cal points
/* virtual intersection out of circle */
void get_out_virtual_points(double x1, double y1, double r1, double x2, double y2, double r2, double d, double& x, double& y);
/* virtual intersection in circle */
void get_in_virtual_points(double x1, double y1, double r1, double x2, double y2, double r2, double d, double& x, double& y);
/* Intersection generated by the circle and circle */
node* get_cc_points(double* c1, double* c2, bool vir = true);
/* Intersection generated by the circle and line */
node* get_cl_points(double* c1, double* l1);
/* Intersection generated by the line and line */
node* get_ll_points(double* l1, double* l2);
node* get_xx_points(double* p1, double* p2);
/* get all loc of points*/
node* get_points(double** data, int data_number);
/* cal number of Intersection */
int get_node_count(node* head);

// cal scores
/* parents score */
double* get_parents_score(Points& points);
/* density score */
double* get_density_score(Points& points);
/* history score */
double* get_history_score(Points& data, double* history_location = nullptr);
/* time score */
double* get_time_score(Points& points, double delta_alpha = 0.2);
/* get score with weight */
double* get_score(Points& points, double* history_location = nullptr);

#endif // LOC_H